name: Create Release Pull Request

on:
  workflow_dispatch:
    inputs:
      base-branch:
        description: 'The base branch for git operations and the pull request.'
        default: 'main'
        required: true
      release-type:
        description: 'A SemVer version diff, i.e. major, minor, patch, prerelease etc. Mutually exclusive with "release-version".'
        required: false
      release-version:
        description: 'A specific version to bump to. Mutually exclusive with "release-type".'
        required: false
  workflow_run:
    branches: [main]
    types:
      - completed
    workflows: [Fetch and Rebuild]

jobs:
  check-trigger:
    runs-on: ubuntu-latest
    steps:
      - if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure' }}
        run: exit 1

  create-release-pr:
    needs: check-trigger
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Set base branch
        id: set-base-branch
        run: |
          input_base_branch=${{ github.event.inputs.base-branch }}
          base_branch=${input_base_branch:-'main'}
          echo ::set-output name=BASE_BRANCH::$base_branch

      - name: Set release type
        id: set-release-type
        run: |
          release_type=${{ github.event.inputs.release-type }}
          if ${{ github.event_name == 'workflow_run' }}; then
            release_type=${release_type:-'minor'}
          fi
          echo ::set-output name=RELEASE_TYPE::$release_type

      - uses: actions/checkout@v2
        with:
          # This is to guarantee that the most recent tag is fetched.
          # This can be configured to a more reasonable value by consumers.
          fetch-depth: 0
          # We check out the specified branch, which will be used as the base
          # branch for all git operations and the release PR.
          ref: ${{ steps.set-base-branch.outputs.BASE_BRANCH }}
      - name: Get Node.js version
        id: nvm
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
      - uses: MetaMask/action-create-release-pr@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release-type: ${{ steps.set-release-type.outputs.RELEASE_TYPE }}
          release-version: ${{ github.event.inputs.release-version }}
          artifacts-path: gh-action__release-authors
      # Upload the release author artifact for use in subsequent workflows
      - uses: actions/upload-artifact@v2
        with:
          name: release-authors
          path: gh-action__release-authors
          if-no-files-found: error
